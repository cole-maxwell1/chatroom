package templates

import (
	"github.com/cole-maxwell1/chatroom/internal/models"
	"strconv"
	"time"
)

templ ChatDisplay(messages []models.ChatMessage, connectedUsers int) {
	@Base() {
		<div
			class="flex flex-col h-full"
			hx-ext="ws"
			ws-connect="/ws"
		>
			<!-- Connection status container -->
			<div class="flex flex-col gap-2 justify-center items-center">
				<h1 class="text-xl font-semibold">Connection Status</h1>
				<div class="flex gap-1 justify-center items-center">
					<div id="status-indicator" class="flex-none p-1 rounded-full">
						<div id="sub-status-indicator" class="w-1.5 h-1.5 rounded-full"></div>
					</div>
					<p class="text-left text-wrap" id="status"></p>
				</div>
			</div>
			<h1 class="mb-2 text-xl font-semibold">Messages</h1>
			<div class="flex flex-col gap-2 h-1 grow">
				<ul
					class="flex overflow-auto flex-col grow"
					id="chat-messages"
				>
					for _, msg := range messages {
						@ChatMessage(msg)
					}
				</ul>
				<hr class="border dark:border-gray-800"/>
				<!-- Enter a username before chatting -->
				<div class="flex flex-col">
					<div class="flex gap-1 self-end items-center" id="total-users">
						@TotalChatters(connectedUsers)
					</div>
					<form id="config-username" class="flex flex-col">
						<label for="input-username">
							Username
						</label>
						<input
							type="text"
							minlength="1"
							maxlength="20"
							required
							id="input-username"
							placeholder="Enter a username..."
						/>
						<button id="set-username" type="submit" class="place-self-end">
							Set
							Username
						</button>
					</form>
					<form ws-send id="chat-form" class="hidden flex-col">
						<input type="hidden" id="username" name="username"/>
						<label id="chat-label" for="message">
							Send a new message
						</label>
						<textarea
							class="h-32"
							disabled="true"
							name="message"
							id="message"
							autocomplete="on"
							placeholder="Type a message..."
							minlength="1"
							maxlength="1000"
							required
						></textarea>
						<div>
							<p
								id="message-counter"
								class="float-start text-gray-600 dark:text-gray-400"
							>
								0/1000
							</p>
							<button
								disabled="true"
								id="send-message"
								type="submit"
								class="float-end"
							>
								Send
							</button>
						</div>
					</form>
				</div>
			</div>
			<script src="javascript/chatDisplay.js"></script>
		</div>
	}
}

templ ChatMessage(msg models.ChatMessage) {
	<li class="p-2 even:bg-gray-100 dark:even:bg-gray-800 odd:dark:bg-gray-900">
		<p class="text-base text-left">{ msg.Content }</p>
		<p class="mt-1 text-xs text-gray-600 dark:text-gray-400">
			{ msg.Username } on <span id="message-timestamp">{ msg.Timestamp.Format(time.RFC3339) }</span>
		</p>
	</li>
}

templ ChatMessageSwap(msg models.ChatMessage) {
	<ul hx-swap-oob="beforeend:#chat-messages">
		@ChatMessage(msg)
	</ul>
}

templ TotalChatters(totUsers int) {
	<div class="flex gap-x-1 items-center self-end">
		<span class="text-xl font-normal">
			if totUsers - 1 == 0 {
				<div id="status-indicator" class="flex-none p-1 rounded-full bg-red-500/20">
					<div id="sub-status-indicator" class="w-1.5 h-1.5 rounded-full bg-red-500"></div>
				</div>
			} else {
				<div id="status-indicator" class="flex-none p-1 rounded-full bg-emerald-500/20">
					<div id="sub-status-indicator" class="w-1.5 h-1.5 rounded-full bg-emerald-500"></div>
				</div>
			}
		</span>
		<p class="font-semibold text-3xl">
			if totUsers - 1 > 0 {
				{ strconv.Itoa(totUsers - 1) }
			} else {
				0
			}
		</p>
	</div>
	<div class="flex justify-between">
		if totUsers - 1 == 1 {
			<p>
				Chatter
			</p>
		} else {
			<p>
				Chatters
			</p>
		}
	</div>
}

templ TotalChattersSwap(totUsers int) {
	<div hx-swap-oob="innerHtml:#total-users">
		@TotalChatters(totUsers)
	</div>
}
